# ABUILD generated by mkpkg_generator.sh

pkgname=gcc
pkgver=4.7.2
pkgbuild=1
arch=("auto")

shortdesc=("gcc (Base GCC package with C support)")
longdesc=("GCC is the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile C code. Other packages add C++, Fortran, Objective-C, and Java support to the compiler core.")

tags=("develop sys-devel")

ecjver=4.5
fastjarver=0.98

adddep="binutils bison"

source=("ftp://ftp.gnu.org/gnu/gcc/gcc-${pkgver}/gcc-${pkgver}.tar.bz2"
"ftp://sourceware.org/pub/java/ecj-${ecjver}.jar n"
"http://download.savannah.gnu.org/releases/fastjar/fastjar-${fastjarver}.tar.gz"
)

build_deps="cloog ppl gcc-gnat libmpc binutils"
pkglist="gpp gfortran gnat java objc"

if [ "$ARCH" = "x86_64" ] ; then
	TARGET=x86_64-slackware-linux
else
	TARGET=i686-slackware-linux
fi


before_build() {
	cd ${srcdir}/gcc-${pkgver}

	# Prepare additional stuff for gcc-java.
	# Not sure if anyone really uses it, but who knows...

	# Copy ecj.jar into the TLD of the source. Needed for java compiler.
	# This can be retrieved from ftp://sourceware.org/pub/java
	cp ${srcache}/ecj-4.5.jar .
}

build() {
	cd ${srcdir}/gcc-${pkgver}
	burn_patches

	# build gcc
	mkdir $srcdir/gcc-${pkgver}/gcc.build.lnx

	if [ "$ARCH" != "x86_64" ]; then
		GCC_ARCHOPTS="--with-arch=i686"
	else
		GCC_ARCHOPTS="--disable-multilib"
	fi
	# Do not install libiberty
	sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

	# Do not run fixincludes
	sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

	cd $srcdir/gcc-${pkgver}/gcc.build.lnx

	BUILD_FLAGS="--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--libexecdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--enable-shared \
		--enable-bootstrap \
		--enable-languages=ada,c,c++,fortran,java,objc,go,lto,obj-c++ \
		--with-system-zlib \
		--with-python-dir=/lib$LIBDIRSUFFIX/python2.6/site-packages \
		--enable-threads=posix \
		--disable-libstdcxx-pch \
		--disable-libunwind-exceptions \
		--enable-__cxa_atexit \
		--enable-lto \
		--enable-clocale=gnu \
		--verbose \
		--enable-gnu-unique-object \
		--enable-checking=release \
		--enable-libssp \
		--with-ppl \
		--enable-objc-gc \
		--with-bugurl=http://bugs.agilialinux.ru/ \
		--enable-libstdcxx-time \
		--enable-linker-build-id \
		--enable-cloog-backend=isl \
		--disable-ppl-version-check \
		--disable-cloog-version-check \
		--enable-gold \
		--enable-ld=default \
		--enable-plugin \
		--disable-gtktest \
		--with-plugin-ld=ld.gold \
		--with-linker-hash-style=gnu \
		$GCC_ARCHOPTS \
		--target=${TARGET} \
		--host=${TARGET} \
		--build=${TARGET}"


	CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" ../configure $BUILD_FLAGS

	# Start the build:

	# Include all debugging info (for now):
	make -j${numjobs} bootstrap

	# Set GCCCHECK=something to run the tests
	if [ ! -z $GCCCHECK ]; then
		make -j${numjobs} check
	fi

	make install DESTDIR=${pkgdir}

	# KLUDGE ALERT
	# These *gdb.py files are causing ldconfig to complain, so they are going
	# to be REMOVED for now...  at some point, they might be moved somewhere
	# else, in which case things should Just Work(tm).  Keep an eye on it.
	rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/*gdb.py

	# Be sure the "specs" file is installed.
	if [ ! -r ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs ]; then
		cat stage1-gcc/specs > ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs
	fi

	# Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory:
	if [ "$ARCH" = "x86_64" ]; then
		sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
			${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs
	fi

	#  make ada.install-common DESTDIR=${pkgdir}
	#  make install-gnatlib DESTDIR=${pkgdir}
	make -i install-info DESTDIR=${pkgdir}

	chmod 755 ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcc_s.so.1

	# The (huge) static GNU java libraries are not packaged.  In nearly all
	# cases one or more dependencies will not be available as static anyway.
	rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcj.a
	rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcj-tools.a

	# This is provided by binutils, so delete it here:
	rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libiberty.a
	rm -f ${pkgdir}/usr/lib/libiberty.a # catch-all

	# Fix stuff up:
	( cd ${pkgdir}/usr/info ; rm dir ; gzip -9 * )
	( cd ${pkgdir}
	# *not* ${LIBDIRSUFFIX}
	mkdir -p lib
	cd lib
	ln -sf /usr/bin/cpp .

	( cd ${pkgdir}/usr/bin
	mv g++ g++-gcc-${pkgver}
	mv gcc gcc-${pkgver}
	mv ${TARGET}-gfortran gfortran-gcc-${pkgver}
	ln -sf g++-gcc-${pkgver} g++
	ln -sf gcc-${pkgver} gcc
	ln -sf g++ c++
	ln -sf gcc cc
	ln -sf gcc-${pkgver} ${TARGET}-gcc
	ln -sf gcc-${pkgver} ${TARGET}-gcc-${pkgver}
	ln -sf gcj ${TARGET}-gcj
	ln -sf gcjh ${TARGET}-gcjh
	ln -sf g++-gcc-${pkgver} ${TARGET}-c++
	ln -sf g++-gcc-${pkgver} ${TARGET}-g++
	ln -sf gfortran-gcc-${pkgver} gfortran
	ln -sf gfortran-gcc-${pkgver} ${TARGET}-gfortran
	ln -sf gfortran-gcc-${pkgver} ${TARGET}-gfortran-${pkgver}
	ln -sf gfortran-gcc-${pkgver} ${TARGET}-g95
	ln -sf gfortran g95
	ln -sf gfortran f95
	ln -sf gfortran-gcc-${pkgver} ${TARGET}-g77
	ln -sf gfortran g77
	ln -sf gfortran f77
	)

	( cd ${pkgdir}/usr/man
	gzip -9 */*
	cd man1
	ln -sf g++.1.gz c++.1.gz
	ln -sf gcc.1.gz cc.1.gz
	)  

	)
}

after_build() {
	# Filter all .la files (thanks much to Mark Post for the sed script):
	( cd $pkgdir
	for file in $(find . -type f -name "*.la") ; do
		cat $file | sed -e 's%-L/gcc-[[:graph:]]* % %g' > $pkgdir/tmp-la-file
		cat $pkgdir/tmp-la-file > $file
	done
	rm $pkgdir/tmp-la-file
	)

	## Strip bloated binaries and libraries:
	( cd ${pkgdir}
	find . -name "lib*so*" -exec strip --strip-unneeded "{}" \;
	find . -name "lib*a" -exec strip -g "{}" \;
	strip --strip-unneeded usr/bin/* 2> /dev/null
	find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
	find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
	)

}
gpp_prep() {
	# gcc-g++:
	cd ${pkgdir}
	mkdir -p usr/bin
	mv ${p_pkgdir}/usr/bin/*++* usr/bin
	mkdir -p usr/include
	mv ${p_pkgdir}/usr/include/c++ usr/include
	mkdir -p usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/*++* usr/lib${LIBDIRSUFFIX}
	mkdir -p usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/cc1plus usr/libexec/gcc/$TARGET/${pkgver}/cc1plus
	mkdir -p usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/*++* usr/man/man1

}

gfortran_prep() {
	# gcc-gfortran:
	cd ${pkgdir}
	mkdir -p usr/bin
	mv ${p_pkgdir}/usr/bin/*gfortran* usr/bin
	mv ${p_pkgdir}/usr/bin/*95* usr/bin
	mv ${p_pkgdir}/usr/bin/*77* usr/bin
	# Doesn't this seem like a logical idea?
	( cd usr/bin ; ln -sf gfortran-gcc-${VERSION} fortran )
	mkdir -p usr/info
	mv ${p_pkgdir}/usr/info/gfortran* usr/info
	mkdir -p usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libgfortran* usr/lib${LIBDIRSUFFIX}
	mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/finclude usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/libgfortran* usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
	mkdir -p usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/f951 usr/libexec/gcc/$TARGET/${pkgver}/f951
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/libgfortran* usr/libexec/gcc/$TARGET/${pkgver}
	mkdir -p usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gfortran* usr/man/man1
}

gnat() {
	# gcc-gnat:
	cd ${pkgdir}
	mkdir -p usr/bin
	mv ${p_pkgdir}/usr/bin/gnat* usr/bin
	mv ${p_pkgdir}/usr/bin/gpr* usr/bin
	mkdir -p usr/info
	mv ${p_pkgdir}/usr/info/gnat* usr/info
	mkdir -p usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/gnat1 usr/libexec/gcc/$TARGET/${pkgver}
	mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/adainclude usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/adalib usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
}


java_prep() {
	# gcc-java:
	( cd $srcdir/fastjar-${fastjarver}

	for patch in $filedir/fastjar-patches/*.gz ; do
		zcat $patch | patch -p1 --verbose || exit 1
	done
	CFLAGS="$SLKCFLAGS" \
		CXXFLAGS="$SLKCFLAGS" \
		./configure \
		--prefix=/usr \
		--libdir=/usr/lib$LIBDIRSUFFIX \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--build=$ARCH-slackware-linux

	make -j${numjobs} || exit 1
	make install DESTDIR=${pkgdir} || exit 1
	)

	cd ${pkgdir}
	mkdir -p usr/bin
	mv ${p_pkgdir}/usr/bin/aot-compile usr/bin
	mv ${p_pkgdir}/usr/bin/addr2name.awk usr/bin
	# mv ${pkgdir}/usr/bin/fastjar usr/bin
	mv ${p_pkgdir}/usr/bin/gappletviewer usr/bin
	mv ${p_pkgdir}/usr/bin/gc-analyze usr/bin
	mv ${p_pkgdir}/usr/bin/*gcj* usr/bin
	mv ${p_pkgdir}/usr/bin/gij usr/bin
	mv ${p_pkgdir}/usr/bin/gjar usr/bin
	mv ${p_pkgdir}/usr/bin/gjarsigner usr/bin
	mv ${p_pkgdir}/usr/bin/gkeytool usr/bin
	mv ${p_pkgdir}/usr/bin/grepjar usr/bin
	mv ${p_pkgdir}/usr/bin/grmid usr/bin
	mv ${p_pkgdir}/usr/bin/grmic usr/bin
	mv ${p_pkgdir}/usr/bin/grmiregistry usr/bin
	mv ${p_pkgdir}/usr/bin/gserialver usr/bin
	mv ${p_pkgdir}/usr/bin/gtnameserv usr/bin
	mv ${p_pkgdir}/usr/bin/gjavah usr/bin
	mv ${p_pkgdir}/usr/bin/gorbd usr/bin
	mv ${p_pkgdir}/usr/bin/jar usr/bin
	mv ${p_pkgdir}/usr/bin/jcf-dump usr/bin
	mv ${p_pkgdir}/usr/bin/jv-* usr/bin
	mv ${p_pkgdir}/usr/bin/rmi* usr/bin
	mkdir -p usr/include/c++/${pkgver}
	# Move some Java only C++ headers from the C++ package:
	mv ${p_pkgdir}/usr/include/c++/${pkgver}/{gcj,gnu,java,javax,org,sun} usr/include/c++/${pkgver}
	mv ${p_pkgdir}/usr/include/ffi.h usr/include
	mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/jawt.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/ffi.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/ffitarget.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/jawt_md.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/jni.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/jni_md.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/jvmpi.h usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/libffi usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	# aot-compile Python plugins:
	if [ ! -d ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/python2.6 ]; then
		echo "NO ${pkgdir}/usr/lib${LIBDIRSUFFIX}/python2.6 !"
		exit 1
	fi
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/python2.6 usr/lib${LIBDIRSUFFIX}
	mkdir -p usr/info
	mv ${p_pkgdir}/usr/info/gcj.* usr/info
	# mv ${pkgdir}/usr/info/fastjar.* usr/info
	mkdir -p usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libffi* usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/logging.properties usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcj* usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcj* usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libgij* usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/lib-org* usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/security usr/lib${LIBDIRSUFFIX}
	mkdir -p usr/lib${LIBDIRSUFFIX}/pkgconfig
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/pkgconfig/libgcj*.pc usr/lib${LIBDIRSUFFIX}/pkgconfig
	rmdir ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/pkgconfig 2> /dev/null
	mkdir -p usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/jc1 usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/ecj1 usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/jvgenmain usr/libexec/gcc/$TARGET/${pkgver}
	mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/gcj usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mkdir -p usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/aot-compile.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gappletviewer.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gc-analyze.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gcj.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gcjh.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gcj-dbtool.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gij.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gjar.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gjarsigner.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gjavah.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gjdoc.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gjnih.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gkeytool.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gnative2ascii.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gorbd.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/grmic.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/grmid.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/grmiregistry.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gserialver.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/gtnameserv.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/jcf-dump.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/jv-convert.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/jv-scan.1.gz usr/man/man1
	mv ${p_pkgdir}/usr/man/man1/rebuild-gcj-db.1.gz usr/man/man1
	mkdir -p usr/share
	mv ${p_pkgdir}/usr/share/java usr/share
}

objc() {
	# gcc-objc:
	cd ${pkgdir}
	mkdir -p usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libobjc* usr/lib${LIBDIRSUFFIX}
	mkdir -p usr/libexec/gcc/$TARGET/${pkgver}
	mv ${p_pkgdir}/usr/libexec/gcc/$TARGET/${pkgver}/cc1obj usr/libexec/gcc/$TARGET/${pkgver}
	mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/objc usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include
}



gpp() {
	pkgname=gcc-g++
	shortdesc=("C++ support for GCC")
	longdesc=("C++ support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile C++ code.  The base gcc package is also required.")
}

gnat() {
	pkgname=gcc-gnat
	shortdesc=("Ada 95 support for GCC")
	longdesc=("Ada 95 support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile Ada 95 code.  Ada95 is the object oriented successor to the Ada83 language.  The base gcc package is also required.")
}


gfortran() {
	pkgname=gcc-gfortran
	shortdesc=("Fortran support for GCC")
	longdesc=("This package contains those parts of the compiler collection needed to compile Fortran code.  The base gcc package is also required.  The GNU Fortran compiler is able to compile nearly all standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs, including a number of standard and non-standard extensions, and can be used on real-world programs.  In particular, the supported extensions include OpenMP, Cray-style pointers, and several Fortran 2003 features such as enumeration, stream I/O, and some of the enhancements to allocatable array support from TR 15581.")
}

java() {
	pkgname=gcc-java
	shortdesc=("Java support for GCC")
	longdesc=("Java support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile programs written in the Java programming language. The base gcc package is also required.")
}

objc() {
	pkgname=gcc-objc
	shortdesc=("Objective C support for GCC")
	longdesc=("Objective-C support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile code written in Objective-C.  Objective-C was originally developed to add object-oriented extensions to the C language, and is best known as the native language of the NeXT computer. The base gcc package is also required.")
}

