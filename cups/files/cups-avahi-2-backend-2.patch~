--- dnssd.c.orig	2012-03-25 09:57:53.000000000 +0000
+++ dnssd.c	2012-03-25 10:02:13.697270527 +0000
@@ -981,98 +981,237 @@
 
   if ((ptr = strstr(name, "._")) != NULL)
     *ptr = '\0';
+  dkey.type = device_type (fullName);
 
-  if (strstr(fullName, "_ipp._tcp."))
-    dkey.type = CUPS_DEVICE_IPP;
-  else if (strstr(fullName, "_ipps._tcp.") ||
-           strstr(fullName, "_ipp-tls._tcp."))
-    dkey.type = CUPS_DEVICE_IPPS;
-  else if (strstr(fullName, "_fax-ipp._tcp."))
-    dkey.type = CUPS_DEVICE_FAX_IPP;
-  else if (strstr(fullName, "_printer._tcp."))
-    dkey.type = CUPS_DEVICE_PRINTER;
-  else if (strstr(fullName, "_pdl-datastream._tcp."))
-    dkey.type = CUPS_DEVICE_PDL_DATASTREAM;
-  else
-    dkey.type = CUPS_DEVICE_RIOUSBPRINT;
+  txt.data = rdata;
+  txt.dataend = rdata + rdlen;
+  device = find_device ((cups_array_t *) context, &txt, &dkey);
+  if (!device)
+    fprintf(stderr, "DEBUG: Ignoring TXT record for \"%s\"...\n", fullName);
+}
+#endif /* HAVE_DNSSD */
+
+
+#ifdef HAVE_AVAHI
+/*
+ * 'avahi_client_callback()' - Avahi client callback function.
+ */
 
-  for (device = cupsArrayFind(devices, &dkey);
-       device;
-       device = cupsArrayNext(devices))
+static void
+avahi_client_callback(AvahiClient *client,
+		      AvahiClientState state,
+		      void *context)
+{
+ /*
+  * If the connection drops, quit.
+  */
+
+  if (state == AVAHI_CLIENT_FAILURE)
   {
-    if (_cups_strcasecmp(device->name, dkey.name) ||
-        _cups_strcasecmp(device->domain, dkey.domain))
+    fprintf (stderr, "ERROR: Avahi connection failed\n");
+    avahi_simple_poll_quit (simple_poll);
+  }
+}
+
+
+/*
+ * 'avahi_query_callback()' - Avahi query callback function.
+ */
+
+static void
+avahi_query_callback(AvahiServiceResolver *resolver,
+		     AvahiIfIndex interface,
+		     AvahiProtocol protocol,
+		     AvahiResolverEvent event,
+		     const char *name,
+		     const char *type,
+		     const char *domain,
+		     const char *host_name,
+		     const AvahiAddress *address,
+		     uint16_t port,
+		     AvahiStringList *txt,
+		     AvahiLookupResultFlags flags,
+		     void *context)
+{
+  AvahiClient		*client;
+  cups_device_t		key,
+			*device;
+  char			uqname[1024],
+			*ptr;
+  cups_txt_records_t	txtr;
+
+  client = avahi_service_resolver_get_client (resolver);
+  if (event != AVAHI_RESOLVER_FOUND)
+  {
+    if (event == AVAHI_RESOLVER_FAILURE)
     {
-      device = NULL;
-      break;
+      fprintf (stderr, "ERROR: %s\n",
+	       avahi_strerror (avahi_client_errno (client)));
     }
-    else if (device->type == dkey.type)
+
+    avahi_service_resolver_free (resolver);
+    return;
+  }
+
+ /*
+  * Set search key for device.
+  */
+
+  key.name = uqname;
+  unquote (uqname, name, sizeof (uqname));
+  if ((ptr = strstr(name, "._")) != NULL)
+    *ptr = '\0';
+
+  key.domain = (char *) domain;
+  key.type = device_type (type);
+
+ /*
+  * Find the device and the the TXT information.
+  */
+
+  txtr.txt = txt;
+  device = find_device ((cups_array_t *) context, &txtr, &key);
+  if (device)
+  {
+   /*
+    * Let the main loop know to announce the device.
+    */
+
+    device->resolved = 1;
+    avahi_got_callback = 1;
+  }
+    else
+    fprintf (stderr, "DEBUG: Ignoring TXT record for \"%s\"...\n", name);
+
+  avahi_service_resolver_free (resolver);
+}
+
+
+/*
+ * 'avahi_browse_callback()' - Avahi browse callback function.
+ */
+
+static void
+avahi_browse_callback(AvahiServiceBrowser *browser,
+		      AvahiIfIndex interface,
+		      AvahiProtocol protocol,
+		      AvahiBrowserEvent event,
+		      const char *name,
+		      const char *type,
+		      const char *domain,
+		      AvahiLookupResultFlags flags,
+		      void *context)
+{
+  AvahiClient *client = avahi_service_browser_get_client (browser);
+
+  switch (event)
+  {
+  case AVAHI_BROWSER_FAILURE:
+    fprintf (stderr, "ERROR: %s\n",
+	     avahi_strerror (avahi_client_errno (client)));
+    avahi_simple_poll_quit (simple_poll);
+    return;
+
+  case AVAHI_BROWSER_NEW:
+   /*
+    * This object is new on the network.
+    */
+
+    if (flags & AVAHI_LOOKUP_RESULT_LOCAL)
     {
      /*
-      * Found it, pull out the priority and make and model from the TXT
-      * record and save it...
+      * This comes from the local machine so ignore it.
       */
 
-      const uint8_t	*data,		/* Pointer into data */
-			*datanext,	/* Next key/value pair */
-			*dataend;	/* End of entire TXT record */
-      uint8_t		datalen;	/* Length of current key/value pair */
-      char		key[256],	/* Key string */
-			value[256],	/* Value string */
-			make_and_model[512],
-				      	/* Manufacturer and model */
-			model[256],	/* Model */
-			device_id[2048];/* 1284 device ID */
-
-
-      device_id[0]      = '\0';
-      make_and_model[0] = '\0';
-
-      strcpy(model, "Unknown");
-
-      for (data = rdata, dataend = data + rdlen;
-           data < dataend;
-           data = datanext)
-      {
-       /*
-        * Read a key/value pair starting with an 8-bit length.  Since the
-	* length is 8 bits and the size of the key/value buffers is 256, we
-	* don't need to check for overflow...
-	*/
+      fprintf (stderr, "DEBUG: ignoring local service %s\n", name);
+    }
+    else
+    {
+     /*
+      * Create a device entry for it if it doesn't yet exist.
+      */
 
-        datalen = *data++;
+      get_device ((cups_array_t *)context, name, type, domain);
 
-        if (!datalen || (data + datalen) > dataend)
-	  break;
+     /*
+      * Now look for a TXT entry.
+      */
 
-        datanext = data + datalen;
+      if (avahi_service_resolver_new (client, interface, protocol,
+				      name, type, domain,
+				      AVAHI_PROTO_UNSPEC, 0,
+				      avahi_query_callback, context) == NULL)
+      {
+	fprintf (stderr, "ERROR: failed to resolve service %s: %s\n",
+		 name, avahi_strerror (avahi_client_errno (client)));
+      }
+    }
 
-        for (ptr = key; data < datanext && *data != '='; data ++)
-	  *ptr++ = *data;
-	*ptr = '\0';
+    break;
 
-	if (data < datanext && *data == '=')
-	{
-	  data ++;
+  case AVAHI_BROWSER_REMOVE:
+  case AVAHI_BROWSER_ALL_FOR_NOW:
+  case AVAHI_BROWSER_CACHE_EXHAUSTED:
+    break;
+  }
+}
+#endif /* HAVE_AVAHI */
 
-	  if (data < datanext)
-	    memcpy(value, data, datanext - data);
-	  value[datanext - data] = '\0';
+  
+/*
+ * 'find_device()' - Find a device from its name and domain.
+ */
 
-	  fprintf(stderr, "DEBUG2: query_callback: \"%s=%s\".\n",
-	          key, value);
-	}
-	else
-	{
-	  fprintf(stderr, "DEBUG2: query_callback: \"%s\" with no value.\n",
-	          key);
-	  continue;
-	}
+static cups_device_t *
+find_device (cups_array_t *devices,
+	     cups_txt_records_t *txt,
+	     cups_device_t *dkey)
+{
+  cups_device_t	*device;
+  char		*ptr;
 
-        if (!_cups_strncasecmp(key, "usb_", 4))
-	{
-	 /*
-	  * Add USB device ID information...
+  for (device = cupsArrayFind(devices, dkey);
+         device;
+         device = cupsArrayNext(devices))
+    {
+    if (_cups_strcasecmp(device->name, dkey->name) ||
+        _cups_strcasecmp(device->domain, dkey->domain))
+      {
+        device = NULL;
+        break;
+      }
+    else if (device->type == dkey->type)
+      {
+       /*
+        * Found it, pull out the priority and make and model from the TXT
+        * record and save it...
+        */
+  
+      char		make_and_model[512],
+  					/* Manufacturer and model */
+  			model[256],	/* Model */
+			device_id[2048]; /* 1284 device ID */
+  
+        device_id[0]      = '\0';
+        make_and_model[0] = '\0';
+  
+        strcpy(model, "Unknown");
+  
+      for (;;)
+        {
+	char *key;
+	char *value;
+  
+	if (parse_txt_record_pair (txt))
+	  goto next;
+  
+	key = txt->key;
+	value = txt->value;
+        if (!strncasecmp(key, "usb_", 4))
+  	{
+  	 /*
+  	  * Add USB device ID information...
 	  */
 
 	  ptr = device_id + strlen(device_id);
